- sensor:

# Sensor für das aktuelle Datum im deutschen Format
  - name: "Mein Datum"
    unique_id: mein_datum
    icon: mdi:calendar-today
    state: >
      {% set months = ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"] %}
      {% set days = ["Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag"] %}
      {{ days[now().weekday()] + ', ' + now().day | string + '.' + months[now().month-1] + ' ' + now().year | string }}

# Sonnenaufgangs-und untergangs-Sensor
  - name: "Sonnenaufgang neu"
    unique_id: sonnenaufgang_zeit
    icon: mdi:weather-sunset-up
    state: >
      {{ as_timestamp(state_attr("sun.sun", "next_rising")) | timestamp_custom("%H:%M") }}

  - name: "Sonnenuntergang neu"
    unique_id: sonnenuntergang_zeit
    icon: mdi:weather-sunset-down
    state: >
      {{ as_timestamp(state_attr("sun.sun", "next_setting")) | timestamp_custom("%H:%M") }}

# Addition Wechselrichter Wirkleistung plus CUN Stromleser Leistung
  - name: "aktuelle Leistung Home"
    unique_id: custom_aktuelle_leistung_home
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    state: >
      {{ (float(states('sensor.wechselrichter_wirkleistung'))) + (float(states('sensor.stromleser_01_e320_power'))) }}

  - name: "aktuelle Leistung Hauptzaehler invertiert"
    unique_id: custom_aktuelle_leistung_hauptzaehler_invertiert
    unit_of_measurement: W
    device_class: power
    state_class: measurement
    state: >
      {{ (float(states('sensor.stromleser_01_e320_power'))) * (-1) }}

# Hilfssensor um das Balkendiagram in ApexCharts in Cent/kWh und mit Tooltip mit Nachkommastellen anzuzeigen. Es wird der Epex Sensor ungewadelt.
#   - name: "EPEX Spot Preis Cent/kWh"
#     unique_id: epex_spot_data_net_price_cent
#     unit_of_measurement: 'ct/kWh'
#     state: >
#       {{ (states('sensor.epex_spot_data_net_price') | float * 100) | round(4) }}
  - name: "EPEX Spot Preis Cent/kWh"
    unique_id: epex_spot_data_net_price_cent
    unit_of_measurement: ct/kWh
    state: >
      {{ (states('sensor.epex_spot_data_net_price') | float * 100) | round(4) }}
    attributes:
      last_update: "{{ state_attr('sensor.epex_spot_data_net_price', 'last_update') }}"
      min: "{{ state_attr('sensor.epex_spot_data_net_price', 'min') }}"
      max: "{{ state_attr('sensor.epex_spot_data_net_price', 'max') }}"
# weitere Attribute nach Bedarf
# *******************************************************************************************************************************

# Arbeitszahlen:
# Arbeitszahl V1 der Solvis Wärmepumpe im aktuellen Monat V1 ausschließlich Betrachtung der Wärmepumpe
  - name: "Solvis Wärmepumpe Zustandszahl Monat"
    unique_id: solvis_warmepumpe_zustandszahl_monat
    unit_of_measurement: ''
    state: >-
        {% if (float(states('sensor.solvis_warmepumpe_stromverbrauch_monat'))) > 0 %}
        {{ ((float(states('sensor.solvis_warmepumpe_erzeugung_thermische_warme_monat') | round(2) )) / (float(states('sensor.solvis_warmepumpe_stromverbrauch_monat') |round(2) ))) | round(2) }}
        {% else %}
          0
        {% endif %}
    icon: mdi:scale-balance
    
# Arbeitszahl der Solvis Wärmepumpe im aktuellen Monat V2 - genutzte Energie zu eingestzter Energie
  - name: "Solvis Wärmepumpe Zustandszahl Monat V2"
    unique_id: solvis_warmepumpe_zustandszahl_monat_v2
    unit_of_measurement: ''
    icon: mdi:scale-balance
    state: >-
      {% if states('sensor.solvis_warmepumpe_stromverbrauch_monat') | float > 0 %}
      {{ ((float(states('sensor.warmepumpe_genutzte_warmemege_gesamt_monat') | round(2) )) / (float(states('sensor.solvis_warmepumpe_stromverbrauch_monat') |round(2) ))) | round(2) }}
      {% else %}
        0
      {% endif %}
        

# Arbeitszahl V1 der Solvis Wärmepumpe im aktuellen Moment
  - name: "Solvis Wärmepumpe Arbeitsszahl aktuell"
    unique_id: solvis_warmepumpe_arbeitszahl_aktuell_id
    unit_of_measurement: '-'
    icon: mdi:scale-balance
    state: >-
      {% set leistung_thermisch = (states('sensor.warmepumpe_zs16_warmepumpe_leistung_thermisch') | float(0)) | round(2) %}
      {% set leistungsaufnahme_elektrisch = (states('sensor.warmepumpe_zs16_warmepumpe_leistungsaufnahme_elektrisch') | float(0)) | round(2) %}
      {% if leistungsaufnahme_elektrisch > 0 %}
        {{ (leistung_thermisch / leistungsaufnahme_elektrisch) | round(2) }}
      {% else %}
        0
      {% endif %}
    attributes:
      leistung_thermisch_gerundet: "{{ leistung_thermisch }}"
      leistungsaufnahme_elektrisch_gerundet: "{{ leistungsaufnahme_elektrisch }}"
      
# Arbeitszahl V1 Zeitraum 01. April bis 31. März
  - name: "Wärmepumpe Arbeitszahl V1 Arpil-März"
    unique_id: waermepumpe_arbeitszahl_v1_april_marz
    icon: mdi:scale-balance
    unit_of_measurement: ''
    state: >-
        {% if (float(states('sensor.warmepumpe_stromverbrauch_jahr_april_marz'))) > 0 %}
        {{ ((float(states('sensor.warmepumpe_warmeerzeugung_jahr_april_marz') | round(2) )) 
          / (float(states('sensor.warmepumpe_stromverbrauch_jahr_april_marz') |round(2) ))) | round(2) }}
        {% else %}
          0
        {% endif %}

# Arbeitszahl V2 der Solvis Wärmepumpe im Zeitraum 01. April bis 31. März
  - name: "Wärmepumpe Arbeitsszahl V2 April-März"
    unique_id: waermepumpe_arbeitszahl_v2_april_marz_id
    unit_of_measurement: ''
    icon: mdi:scale-balance
    state: >-
      {% set kwh_thermisch = (states('sensor.warmepumpe_warmenutzung_summe_jahr_april_marz') | float(0)) | round(2) %}
      {% set kwh_elektrisch = (states('sensor.warmepumpe_stromverbrauch_jahr_april_marz') | float(0)) | round(2) %}
      {% if kwh_elektrisch > 0 %}
        {{ (kwh_thermisch / kwh_elektrisch) | round(2) }}
      {% else %}
        0
      {% endif %}
    attributes:
      leistung_thermisch_gerundet: "{{ kwh_thermisch }}"
      leistungsaufnahme_elektrisch_gerundet: "{{ kwh_elektrisch }}"

      
# ***************************************************************************************************
# Arbeitszahl V1 Zeitraum Kalenderjaht
  - name: "Wärmepumpe Arbeitszahl V1 Kalenderjahr"
    unique_id: waermepumpe_arbeitszahl_v1_kalenderjahr
    icon: mdi:scale-balance
    unit_of_measurement: ''
    state: >-
        {% if (float(states('sensor.solvis_warmepumpe_stromverbrauch_aktuelles_jahr'))) > 0 %}
        {{ ((float(states('sensor.warmepumpe_warmeerzeugung_kalender_jahr') | round(2) )) 
          / (float(states('sensor.solvis_warmepumpe_stromverbrauch_aktuelles_jahr') |round(2) ))) | round(2) }}
        {% else %}
          0
        {% endif %}

# Arbeitszahl V2 der Solvis Wärmepumpe im Zeitraum 01. April bis 31. März
  - name: "Wärmepumpe Arbeitsszahl V2 Kalenderjahr"
    unique_id: waermepumpe_arbeitszahl_v2_kalenderjahr_id
    unit_of_measurement: ''
    icon: mdi:scale-balance
    state: >-
      {% set kwh_thermisch = (states('sensor.warmepumpe_warmenutzung_summe_kalenderjahr') | float(0)) | round(2) %}
      {% set kwh_elektrisch = (states('sensor.solvis_warmepumpe_stromverbrauch_aktuelles_jahr') | float(0)) | round(2) %}
      {% if kwh_elektrisch > 0 %}
        {{ (kwh_thermisch / kwh_elektrisch) | round(2) }}
      {% else %}
        0
      {% endif %}
    attributes:
      leistung_thermisch_gerundet: "{{ kwh_thermisch }}"
      leistungsaufnahme_elektrisch_gerundet: "{{ kwh_elektrisch }}"

      
# ***************************************************************************************************

# ***************************************************************************************************
# Arbeitszahlen vom Tag
  - name: "Solvis Wärmepumpe Arbeitszahl Tag V1"
    unique_id: solvis_warmepumpe_arbeitszahl_tag_v1_id
    unit_of_measurement: '-'
    icon: mdi:scale-balance
    state: >-
        {% set arbeit_thermisch = (states('sensor.solvis_warmepumpe_erzeugung_thermische_warme_tag') | float(0)) | round(2) %}
        {% set arbeit_elektrisch = (states('sensor.solvis_warmepumpe_stromverbrauch_tag') | float(0)) | round(2) %}
        {% if arbeit_elektrisch >0 %}
          {{ (arbeit_thermisch / arbeit_elektrisch) | round(2) }}
        {% else %}
          0
        {% endif %}
    attributes:
     arbeit_thermisch_gerundet: "{{ arbeit_thermisch }}"
     arbeit_elektrisch_gerundet: "{{ arbeit_elektrisch }}" 

  - name: "Solvis Wärmepumpe Arbeitszahl Tag V2"
    unique_id: solvis_warmepumpe_arbeitszahl_tag_v2_id
    unit_of_measurement: '-'
    icon: mdi:scale-balance
    state: >-
        {% set arbeit_thermisch = (states('sensor.solvis_warmepumpe_gesamte_genutzte_warme_tag') | float(0)) | round(2) %}
        {% set arbeit_elektrisch = (states('sensor.solvis_warmepumpe_stromverbrauch_tag') | float(0)) | round(2) %}
        {% if arbeit_elektrisch >0 %}
          {{ (arbeit_thermisch / arbeit_elektrisch) | round(2) }}
        {% else %}
          0
        {% endif %}
    attributes:
     arbeit_thermisch_gerundet: "{{ arbeit_thermisch }}"
     arbeit_elektrisch_gerundet: "{{ arbeit_elektrisch }}" 

# ***************************************************************************************************

# ***************************************************************************************************

# Addition von genutzen täglichen Wärmemengen
  - name: "Solvis Wärmepumpe Gesamte genutzte Wärme Tag"
    unique_id: solvis_warmepumpe_gesamte_genutzte_warme_tag_id
    unit_of_measurement: kWh
    state: >
      {% set ww = states('sensor.solvis_warmepumpe_genutztes_warmwasser_tag') | float(0) %}
      {% set hkr = states('sensor.solvis_warmepumpe_genutzte_warme_hkr_tag') | float(0) %}
      {{ (ww + hkr) | round(2) }}
    attributes:
      warmwasser: "{{ ww }}"
      hkr: "{{ hkr }}"
        

#******************************************************************************************************
# ***************************************************************************************************

# Addition von genutzen Wärmemengen Jahr 01.04. bis 31.03.
  - name: "Wärmepumpe Wärmenutzung Summe Jahr April-März"
    unique_id: waermepumpe_waermenutzung_summe_jahr_april_marz
    unit_of_measurement: kWh
    state: >
      {% set ww = states('sensor.warmepumpe_warmenutzung_ww_jahr_april_marz') | float(0) %}
      {% set hkr = states('sensor.warmepumpe_warmenutzung_hkr_jahr_april_marz') | float(0) %}
      {{ (ww + hkr) | round(2) }}
    attributes:
      warmwasser: "{{ ww }}"
      hkr: "{{ hkr }}"
        

#******************************************************************************************************

# Addition von genutzen Wärmemengen im Kalender-Jahr
  - name: "Wärmepumpe Wärmenutzung Summe Kalenderjahr"
    unique_id: waermepumpe_waermenutzung_summe_kalenderjahr
    unit_of_measurement: kWh
    state: >
      {% set ww = states('sensor.solvis_warmepumpe_hkr_thermisch_aktuelles_jahr') | float(0) %}
      {% set hkr = states('sensor.solvis_warmepumpe_genutztes_warmwasser_letzten_11_monate') | float(0) %}
      {{ (ww + hkr) | round(2) }}
    attributes:
      warmwasser: "{{ ww }}"
      hkr: "{{ hkr }}"
        

#******************************************************************************************************
#******************************************************************************************************
# Binary Sensor für Wärmepumpe an oder aus. Zur Darstellung und für die Verwendung in der template.yaml
- binary_sensor:
    - name: "Wärmepumpe ist aktiv"
      unique_id: warmepumpe_ist_aktiv
      state: "{{ states('sensor.warmepumpe_zs16_warmepumpe_leistung_thermisch') | float(0) > 0 }}"
      device_class: running

#******************************************************************************************************
# Statistik-Sensoren für Wärmepumpe - Durchschnittliche Laufzeiten
#******************************************************************************************************
- sensor:
    # Durchschnittliche Dauer der On-Phasen heute in Minuten
    - name: "Wärmepumpe durchschnittliche On-Dauer heute"
      unique_id: warmepumpe_durchschnitt_on_dauer_heute_id
      icon: mdi:timer-outline
      unit_of_measurement: "min"
      state: >
        {% set zyklen = states('sensor.warmepumpe_wechsel_heute') | float(0) %}
        {% set gesamtzeit = states('sensor.warmepumpe_gesamtlaufzeit_heute') | float(0) %}
        {% if zyklen > 0 %}
          {{ (gesamtzeit * 60 / zyklen) | round(1) }}
        {% else %}
          0
        {% endif %}
      attributes:
        zyklen_heute: "{{ states('sensor.warmepumpe_wechsel_heute') }}"
        gesamtlaufzeit_heute_h: "{{ states('sensor.warmepumpe_gesamtlaufzeit_heute') }}"

    # Durchschnittliche Dauer der On-Phasen gestern in Minuten
    - name: "Wärmepumpe durchschnittliche On-Dauer gestern"
      unique_id: warmepumpe_durchschnitt_on_dauer_gestern_id  
      icon: mdi:timer-outline
      unit_of_measurement: "min"
      state: >
        {% set zyklen = states('sensor.warmepumpe_wechsel_gestern') | float(0) %}
        {% set gesamtzeit = states('sensor.warmepumpe_gesamtlaufzeit_gestern') | float(0) %}
        {% if zyklen > 0 %}
          {{ (gesamtzeit * 60 / zyklen) | round(1) }}
        {% else %}
          0
        {% endif %}
      attributes:
        zyklen_gestern: "{{ states('sensor.warmepumpe_wechsel_gestern') }}"
        gesamtlaufzeit_gestern_h: "{{ states('sensor.warmepumpe_gesamtlaufzeit_gestern') }}"

#******************************************************************************************************
#******************************************************************************************************
# Incrementelle Energiezähler für Wärmepumpe
# Diese Sensoren tracken die Energiemengen, die während der Laufzeit der Wärmepumpe verbraucht/erzeugt werden

- sensor:
    - name: "Zähler PV für Wärmepumpe"
      unique_id: zahler_pv_fuer_warmepumpe
      unit_of_measurement: kWh
      device_class: energy
      state_class: total_increasing
      state: >
        {% if is_state('binary_sensor.warmepumpe_ist_aktiv', 'on') %}
          {% set current_pv = states('sensor.wechselrichter_gesamtenergieertrag')|float(0) %}
          {% set current_out = states('sensor.stromleser_01_e320_e_out')|float(0) %}
          {% set baseline_pv = states('input_number.wp_baseline_pv_generation')|float(0) %}
          {% set baseline_out = states('input_number.wp_baseline_grid_export')|float(0) %}
          {% set accumulated = states('input_number.wp_accumulated_pv_counter')|float(0) %}
          {% set pv_diff = (current_pv - baseline_pv) %}
          {% set out_diff = (current_out - baseline_out) %}
          {% set increment = (pv_diff - out_diff) %}
          {% set result = accumulated + (increment if increment >= 0 else 0) %}
          {{ result | round(3) }}
        {% else %}
          {{ states('input_number.wp_accumulated_pv_counter')|float(0) }}
        {% endif %}
      attributes:
        current_pv_generation: "{{ states('sensor.wechselrichter_gesamtenergieertrag') }}"
        current_grid_export: "{{ states('sensor.stromleser_01_e320_e_out') }}"
        baseline_pv_generation: "{{ states('input_number.wp_baseline_pv_generation') }}"
        baseline_grid_export: "{{ states('input_number.wp_baseline_grid_export') }}"
        accumulated_counter: "{{ states('input_number.wp_accumulated_pv_counter') }}"
        pv_increment: "{{ (states('sensor.wechselrichter_gesamtenergieertrag')|float(0) - states('input_number.wp_baseline_pv_generation')|float(0)) | round(3) }}"
        export_increment: "{{ (states('sensor.stromleser_01_e320_e_out')|float(0) - states('input_number.wp_baseline_grid_export')|float(0)) | round(3) }}"
#******************************************************************************************************
#******************************************************************************************************

# Template-Sensor für 7-Tage Wärmepumpe Wechsel Übersicht
- sensor:
    - name: "Wärmepumpe Wechsel 7 Tage Übersicht"
      unique_id: warmepumpe_wechsel_7_tage_uebersicht_id
      icon: mdi:chart-bar
      state: >
        {% set heute = states('sensor.warmepumpe_wechsel_heute') | int(0) %}
        {% set gestern = states('sensor.warmepumpe_wechsel_gestern') | int(0) %}
        {% set tag_2 = states('sensor.warmepumpe_wechsel_tag_minus_2') | int(0) %}
        {% set tag_3 = states('sensor.warmepumpe_wechsel_tag_minus_3') | int(0) %}
        {% set tag_4 = states('sensor.warmepumpe_wechsel_tag_minus_4') | int(0) %}
        {% set tag_5 = states('sensor.warmepumpe_wechsel_tag_minus_5') | int(0) %}
        {% set tag_6 = states('sensor.warmepumpe_wechsel_tag_minus_6') | int(0) %}
        {% set tag_7 = states('sensor.warmepumpe_wechsel_tag_minus_7') | int(0) %}
        {{ (heute + gestern + tag_2 + tag_3 + tag_4 + tag_5 + tag_6 + tag_7) / 7 }}
      attributes:
        heute: "{{ states('sensor.warmepumpe_wechsel_heute') }}"
        gestern: "{{ states('sensor.warmepumpe_wechsel_gestern') }}"
        tag_minus_2: "{{ states('sensor.warmepumpe_wechsel_tag_minus_2') }}"
        tag_minus_3: "{{ states('sensor.warmepumpe_wechsel_tag_minus_3') }}"
        tag_minus_4: "{{ states('sensor.warmepumpe_wechsel_tag_minus_4') }}"
        tag_minus_5: "{{ states('sensor.warmepumpe_wechsel_tag_minus_5') }}"
        tag_minus_6: "{{ states('sensor.warmepumpe_wechsel_tag_minus_6') }}"
        tag_minus_7: "{{ states('sensor.warmepumpe_wechsel_tag_minus_7') }}"
        datum_heute: "{{ now().strftime('%d.%m.%Y') }}"
        datum_gestern: "{{ (now() - timedelta(days=1)).strftime('%d.%m.%Y') }}"
        datum_tag_2: "{{ (now() - timedelta(days=2)).strftime('%d.%m.%Y') }}"
        datum_tag_3: "{{ (now() - timedelta(days=3)).strftime('%d.%m.%Y') }}"
        datum_tag_4: "{{ (now() - timedelta(days=4)).strftime('%d.%m.%Y') }}"
        datum_tag_5: "{{ (now() - timedelta(days=5)).strftime('%d.%m.%Y') }}"
        datum_tag_6: "{{ (now() - timedelta(days=6)).strftime('%d.%m.%Y') }}"
        datum_tag_7: "{{ (now() - timedelta(days=7)).strftime('%d.%m.%Y') }}"
